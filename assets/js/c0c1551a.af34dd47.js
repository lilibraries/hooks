"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[3305],{25325:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(59496),s=t(7207),u=t(53364),o=t(89258);const c=function(e){return function(n,t,c){const i=(0,r.useRef)(!1),a=(0,r.useRef)([]),l=(0,r.useRef)([]),f=(0,r.useRef)();function p(){f.current?.()}e((()=>{const e=c.map(s.Z);function r(){a.current=t,l.current=e,f.current=n()}i.current?(0,u.Z)(t,a.current)&&(0,u.Z)(e,l.current)||(p(),r()):(r(),i.current=!0)})),(0,o.Z)((()=>{p(),i.current=!1}))}}},31745:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(59496);const s=t(44622).Z?r.useLayoutEffect:r.useEffect;const u=(0,t(25325).Z)(s)},63339:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(59496),s=t(63484);const u=function(e){const n=(0,r.useRef)(),t=(0,s.Z)(e);return n.current||(n.current=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.current.apply(this,n)}),n.current}},9698:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(73023),s=t(7207),u=t(63339),o=t(31745);const c=function(e,n){const t=(0,u.Z)(n);(0,o.Z)((()=>{const n=(0,s.Z)(e);if(!n)return;const u=new r.Z(t);return u.observe(n),()=>{u.disconnect()}}),[],[e])}},89258:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(59496);const s=function(e){const n=(0,r.useRef)(e);n.current=e,(0,r.useEffect)((()=>()=>{n.current()}),[])}},24060:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>f,default:()=>b,frontMatter:()=>l,metadata:()=>p,toc:()=>v});var r=t(96600),s=t(59496),u=t(49613),o=t(65836),c=t(68892),i=t(9698);const a=function(){const[e,n]=(0,s.useState)(0),t=(0,s.useRef)(null);return(0,i.Z)(t,(()=>{n((e=>++e))})),s.createElement("div",{ref:t},"Container size change times: ",e)},l={},f=void 0,p={unversionedId:"useResizeObserver",id:"useResizeObserver",title:"useResizeObserver",description:"Observe a element size changing.",source:"@site/docs/useResizeObserver.mdx",sourceDirName:".",slug:"/useResizeObserver",permalink:"/hooks/useResizeObserver",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"useEventListener",permalink:"/hooks/useEventListener"},next:{title:"useIntersectionObserver",permalink:"/hooks/useIntersectionObserver"}},d={},v=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],m={toc:v};function b(e){let{components:n,...t}=e;return(0,u.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,u.kt)("p",null,"Observe a element size changing."),(0,u.kt)("h2",{id:"api"},"API"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-ts"},"function useResizeObserver(\n  target: EffectTarget<Element>,\n  listener: (entries: ResizeObserverEntry[]) => void\n): void;\n\ntype Nullable<T> = T | undefined | null;\ntype EffectTarget<T> =\n  | Nullable<T>\n  | (() => Nullable<T>)\n  | { current: Nullable<T> };\n")),(0,u.kt)("h2",{id:"example"},"Example"),(0,u.kt)(c.Z,{mdxType:"ExampleBlock"},(0,u.kt)(a,{mdxType:"Example"})),(0,u.kt)(o.Z,{language:"tsx",mdxType:"CodeBlock"},'import React, { useRef, useState } from "react";\nimport { useResizeObserver } from "@lilib/hooks";\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n  const containerRef = useRef(null);\n\n  useResizeObserver(containerRef, () => {\n    setCount((count) => ++count);\n  });\n\n  return <div ref={containerRef}>Container size change times: {count}</div>;\n}\n\nexport default Example;\n'))}b.isMDXComponent=!0}}]);