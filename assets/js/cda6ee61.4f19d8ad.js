"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[5814],{1613:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var t=n(7462),s=(n(7294),n(3905));const r={},i=void 0,l={unversionedId:"useMergedRef",id:"useMergedRef",title:"useMergedRef",description:"This hook combines multiple refs into one. It's very useful when developing components.",source:"@site/docs/useMergedRef.mdx",sourceDirName:".",slug:"/useMergedRef",permalink:"/hooks/useMergedRef",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"usePreviousRef",permalink:"/hooks/usePreviousRef"},next:{title:"useMountedRef",permalink:"/hooks/useMountedRef"}},u={},a=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],f={toc:a};function d(e){let{components:o,...n}=e;return(0,s.kt)("wrapper",(0,t.Z)({},f,n,{components:o,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This hook combines multiple refs into one. It's very useful when developing components."),(0,s.kt)("h2",{id:"api"},"API"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"function useMergedRef<T>(...refs: Ref<T>[]): React.RefCallback<T>;\n")),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, { forwardRef, useRef } from "react";\nimport { useMergedRef } from "@lilib/hooks";\n\nconst Component = forwardRef<HTMLDivElement, any>((props, ref) => {\n  const domRef = useRef<HTMLDivElement>(null);\n  const mergedRef = useMergedRef(domRef, ref);\n\n  // Do somthing.\n\n  return <div ref={mergedRef}>...</div>;\n});\n')))}d.isMDXComponent=!0}}]);