"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[5137],{88283:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const s={},l=void 0,u={unversionedId:"useUpdate",id:"useUpdate",title:"useUpdate",description:"Run effect after the component is updated or the deps are changed, ignore on mount.",source:"@site/docs/useUpdate.mdx",sourceDirName:".",slug:"/useUpdate",permalink:"/hooks/useUpdate",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"useMount",permalink:"/hooks/useMount"},next:{title:"useUnmount",permalink:"/hooks/useUnmount"}},i={},p=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],r={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Run effect after the component is updated or the deps are changed, ignore on mount."),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function useUpdate(\n  effect: React.EffectCallback,\n  deps?: React.DependencyList\n): void;\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { useUpdate } from "@lilib/hooks";\n\nfunction Example() {\n  const [signal, setSignal] = useState({});\n\n  useUpdate(() => {\n    console.log("Signal changed");\n  }, [signal]);\n\n  return <button onClick={() => setSignal({})}>Change signal</button>;\n}\n')))}d.isMDXComponent=!0}}]);