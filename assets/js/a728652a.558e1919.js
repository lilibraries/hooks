"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[915],{8242:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(7294);const a=function(t){const e=(0,o.useRef)(t);return e.current=t,e}},4708:(t,e,n)=>{n.d(e,{Z:()=>s});var o=n(7294),a=n(8242);const s=function(t){const e=(0,o.useRef)(),n=(0,a.Z)(t);return e.current||(e.current=function(){for(var t=arguments.length,e=new Array(t),o=0;o<t;o++)e[o]=arguments[o];return n.current.apply(this,e)}),e.current}},8042:(t,e,n)=>{n.d(e,{Z:()=>u});var o=n(7294),a=n(4708);const s=function(){const t=(0,o.useRef)(!1);return(0,o.useEffect)((()=>(t.current=!1,()=>{t.current=!0})),[]),t};const u=function(t){const e=s(),[n,u]=(0,o.useState)(t);return[n,(0,a.Z)((t=>{e.current||u(t)}))]}},2641:(t,e,n)=>{n.d(e,{Z:()=>o});const o=function(t){return"function"==typeof t}},2910:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>k,contentTitle:()=>S,default:()=>b,frontMatter:()=>m,metadata:()=>f,toc:()=>h});var o=n(7462),a=n(7294),s=n(3905),u=n(3066),r=n(2823),c=n(4708),i=n(8042),l=n(2641);const d=function(t){const[e,n]=(0,i.Z)(t);return[e,(0,c.Z)((t=>{n((e=>{const n=(0,l.Z)(t)?t(e):t;return{...e,...n}}))}))]};const p=function(){const[t,e]=d({count1:0,count2:0}),{count1:n,count2:o}=t;return a.createElement(a.Fragment,null,a.createElement("div",null,a.createElement("button",{onClick:()=>{e({count1:n+1})}},"+1")," ",n),a.createElement("div",null,a.createElement("button",{onClick:()=>{e({count2:o+2})}},"+2")," ",o))},m={},S=void 0,f={unversionedId:"useSetState",id:"useSetState",title:"useSetState",description:"This hook is like this.setState method of class component. It requires an object as the initial state, and can update part of the state. The new state will be merged with the old state.",source:"@site/docs/useSetState.mdx",sourceDirName:".",slug:"/useSetState",permalink:"/hooks/useSetState",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"useToggle",permalink:"/hooks/useToggle"},next:{title:"useSafeState",permalink:"/hooks/useSafeState"}},k={},h=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],v={toc:h};function b(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,o.Z)({},v,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This hook is like ",(0,s.kt)("inlineCode",{parentName:"p"},"this.setState")," method of class component. It requires an object as the initial state, and can update part of the state. The new state will be merged with the old state."),(0,s.kt)("h2",{id:"api"},"API"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"function useSetState<S extends object>(\n  initialState: S | (() => S)\n): readonly [\n  state: S,\n  setState: (patch: Partial<S> | ((prevState: S) => Partial<S>)) => void\n];\n")),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)(r.Z,{mdxType:"ExampleBlock"},(0,s.kt)(p,{mdxType:"Example"})),(0,s.kt)(u.Z,{language:"tsx",mdxType:"CodeBlock"},'import React from "react";\nimport { useSetState } from "@lilib/hooks";\n\nfunction Example() {\n  const [state, setState] = useSetState({ count1: 0, count2: 0 });\n  const { count1, count2 } = state;\n\n  return (\n    <>\n      <div>\n        <button\n          onClick={() => {\n            setState({ count1: count1 + 1 });\n          }}\n        >\n          +1\n        </button>{" "}\n        {count1}\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            setState({ count2: count2 + 2 });\n          }}\n        >\n          +2\n        </button>{" "}\n        {count2}\n      </div>\n    </>\n  );\n}\n\nexport default Example;\n'))}b.isMDXComponent=!0}}]);