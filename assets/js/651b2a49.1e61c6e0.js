(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{100:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return g})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return d}));var l=n(3),o=n(7),a=n(0),i=n.n(a),u=n(110),b=n(112),r=n(113);var s=function(){var e=Object(r.q)(!0),t=e[0],n=e[1],l=n.toggle,o=n.toggleOn,a=n.toggleOff;return i.a.createElement(i.a.Fragment,null,i.a.createElement("button",{onClick:function(){return l()}},"Toggle"),i.a.createElement("button",{onClick:o},"Show"),i.a.createElement("button",{onClick:a},"Hide"),i.a.createElement("div",{style:{display:t?"block":"none"}},"Example text can be handled by the buttons above."))},c={},g={unversionedId:"useToggle",id:"useToggle",isDocsHomePage:!1,title:"useToggle",description:"Use boolean value.",source:"@site/docs/useToggle.mdx",slug:"/useToggle",permalink:"/hooks/useToggle",version:"current",sidebar:"docs",previous:{title:"useIsomorphicLayoutEffect",permalink:"/hooks/useIsomorphicLayoutEffect"},next:{title:"useDebounced",permalink:"/hooks/useDebounced"}},p=[{value:"Usage",id:"usage",children:[{value:"Params",id:"params",children:[]},{value:"Results",id:"results",children:[]}]},{value:"Example",id:"example",children:[]}],m={toc:p};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(u.b)("wrapper",Object(l.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(u.b)("p",null,"Use boolean value."),Object(u.b)("h2",{id:"usage"},"Usage"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-ts"},"function useToggle(\n  initialValue?: boolean\n): [\n  value: boolean,\n  actions: {\n    toggle: (newValue?: boolean) => void;\n    toggleOn: () => void;\n    toggleOff: () => void;\n  }\n];\n")),Object(u.b)("h3",{id:"params"},"Params"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},Object(u.b)("strong",{parentName:"li"},Object(u.b)("inlineCode",{parentName:"strong"},"initialValue"),":")," optional initial value, default is false.")),Object(u.b)("h3",{id:"results"},"Results"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},Object(u.b)("strong",{parentName:"li"},Object(u.b)("inlineCode",{parentName:"strong"},"value"),":")," a boolean value, can be changed by the following functions."),Object(u.b)("li",{parentName:"ul"},Object(u.b)("strong",{parentName:"li"},Object(u.b)("inlineCode",{parentName:"strong"},"toggle"),":")," toggle the value. If the newValue param is specified, the value will be set to the newValue."),Object(u.b)("li",{parentName:"ul"},Object(u.b)("strong",{parentName:"li"},Object(u.b)("inlineCode",{parentName:"strong"},"toggleOn"),":")," set the value to true."),Object(u.b)("li",{parentName:"ul"},Object(u.b)("strong",{parentName:"li"},Object(u.b)("inlineCode",{parentName:"strong"},"toggleOff"),":")," set the value to false.")),Object(u.b)("h2",{id:"example"},"Example"),Object(u.b)(b.a,{mdxType:"ExampleBox"},Object(u.b)(s,{mdxType:"UseToggleExample"})),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { useToggle } from "@lilib/hooks";\n\nfunction Example() {\n  const [visible, { toggle, toggleOn, toggleOff }] = useToggle(true);\n\n  return (\n    <>\n      <button onClick={() => toggle()}>Toggle</button>\n      <button onClick={toggleOn}>Show</button>\n      <button onClick={toggleOff}>Hide</button>\n      <div style={{ display: visible ? "block" : "none" }}>\n        Example text can be handled by the buttons above.\n      </div>\n    </>\n  );\n}\n\nexport default Example;\n')))}d.isMDXComponent=!0}}]);