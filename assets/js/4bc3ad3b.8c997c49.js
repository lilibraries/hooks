"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[2564],{78554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>u,metadata:()=>r,toc:()=>d});var o=n(96600),s=(n(59496),n(49613));const u={},a=void 0,r={unversionedId:"useMountedRef",id:"useMountedRef",title:"useMountedRef",description:"It returns a ref object that used to determine whether the component is mounted.",source:"@site/docs/useMountedRef.mdx",sourceDirName:".",slug:"/useMountedRef",permalink:"/hooks/useMountedRef",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"useComposedRef",permalink:"/hooks/useComposedRef"},next:{title:"useUnmountedRef",permalink:"/hooks/useUnmountedRef"}},i={},d=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],l={toc:d};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"It returns a ref object that used to determine whether the component is mounted."),(0,s.kt)("h2",{id:"api"},"API"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"function useMountedRef(): React.MutableRefObject<boolean>;\n")),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { useMountedRef } from "@lilib/hooks";\n\nfunction Example() {\n  const mountedRef = useMountedRef();\n\n  if (mountedRef.current) {\n    // Do something.\n  }\n\n  ...\n}\n')))}m.isMDXComponent=!0}}]);