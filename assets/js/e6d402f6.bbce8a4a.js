"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[4183],{91692:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var t=s(87462),n=(s(67294),s(3905));const r={},l=void 0,p={unversionedId:"useComposedRef",id:"useComposedRef",title:"useComposedRef",description:"This hook compose multiple refs into one. It's very useful when developing components.",source:"@site/docs/useComposedRef.mdx",sourceDirName:".",slug:"/useComposedRef",permalink:"/hooks/useComposedRef",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"usePreviousRef",permalink:"/hooks/usePreviousRef"},next:{title:"useMountedRef",permalink:"/hooks/useMountedRef"}},i={},u=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],a={toc:u};function m(e){let{components:o,...s}=e;return(0,n.kt)("wrapper",(0,t.Z)({},a,s,{components:o,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This hook compose multiple refs into one. It's very useful when developing components."),(0,n.kt)("h2",{id:"api"},"API"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"function useComposedRef<T>(...refs: React.Ref<T>[]): React.RefCallback<T>;\n")),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, { forwardRef, useRef } from "react";\nimport { useComposedRef } from "@lilib/hooks";\n\nconst Component = forwardRef<HTMLDivElement, any>((props, ref) => {\n  const domRef = useRef<HTMLDivElement>(null);\n  const composedRef = useComposedRef(domRef, ref);\n\n  // Do somthing.\n\n  return <div ref={composedRef}>...</div>;\n});\n')))}m.isMDXComponent=!0}}]);