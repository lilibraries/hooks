"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[2544],{2165:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>i,contentTitle:()=>n,default:()=>d,frontMatter:()=>u,metadata:()=>l,toc:()=>r});var s=t(7462),a=(t(7294),t(3905));const u={},n=void 0,l={unversionedId:"useMemoizedValue",id:"useMemoizedValue",title:"useMemoizedValue",description:"Return the previous value when the value has not changed. Use deep comparison.",source:"@site/docs/useMemoizedValue.mdx",sourceDirName:".",slug:"/useMemoizedValue",permalink:"/hooks/useMemoizedValue",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"useDebouncedValue",permalink:"/hooks/useDebouncedValue"},next:{title:"usePersist",permalink:"/hooks/usePersist"}},i={},r=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],p={toc:r};function d(e){let{components:o,...t}=e;return(0,a.kt)("wrapper",(0,s.Z)({},p,t,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Return the previous value when the value has not changed. Use deep comparison."),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function useMemoizedValue<T>(value: T): T;\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useMemo, DependencyList } from "react";\nimport { useMemoizedValue } from "@lilib/hooks";\n\nfunction useDeepCompareMemo<T>(factory: () => T, deps?: DependencyList): T {\n  return useMemo(factory, useMemoizedValue(deps));\n}\n\nexport default useDeepCompareMemo;\n')))}d.isMDXComponent=!0}}]);