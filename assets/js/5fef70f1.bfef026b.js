"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[775],{6391:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>n,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var o=s(96600),r=(s(59496),s(49613));const i={},n=void 0,u={unversionedId:"usePreviousRef",id:"usePreviousRef",title:"usePreviousRef",description:"Return a ref object whose .current property is assigned to previous updated value. The first time is undefined.",source:"@site/docs/usePreviousRef.mdx",sourceDirName:".",slug:"/usePreviousRef",permalink:"/hooks/usePreviousRef",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"useLatestRef",permalink:"/hooks/useLatestRef"},next:{title:"useComposedRef",permalink:"/hooks/useComposedRef"}},a={},p=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],l={toc:p};function d(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Return a ref object whose ",(0,r.kt)("inlineCode",{parentName:"p"},".current")," property is assigned to previous updated value. The first time is ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function usePreviousRef<T>(value: T): React.MutableRefObject<T | undefined>;\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import React from "react";\nimport { usePreviousRef } from "@lilib/hooks";\n\nfunction Example(props) {\n  const valueRef = usePreviousRef(props.value)\n  ...\n}\n')))}d.isMDXComponent=!0}}]);