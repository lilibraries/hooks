"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[3890],{9407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=n(7462),u=(n(7294),n(3905));const s={},a=void 0,r={unversionedId:"useUnmountedRef",id:"useUnmountedRef",title:"useUnmountedRef",description:"It returns a ref object that used to determine whether the component is unmounted.",source:"@site/docs/useUnmountedRef.mdx",sourceDirName:".",slug:"/useUnmountedRef",permalink:"/hooks/useUnmountedRef",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"useMountedRef",permalink:"/hooks/useMountedRef"},next:{title:"useTitle",permalink:"/hooks/useTitle"}},i={},l=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],m={toc:l};function d(e){let{components:t,...n}=e;return(0,u.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("p",null,"It returns a ref object that used to determine whether the component is unmounted."),(0,u.kt)("h2",{id:"api"},"API"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-ts"},"function useUnmountedRef(): React.MutableRefObject<boolean>;\n")),(0,u.kt)("h2",{id:"example"},"Example"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { useUnmountedRef } from "@lilib/hooks";\n\nfunction Example() {\n  const unmountedRef = useUnmountedRef();\n\n  if (unmountedRef.current) {\n    // Do something.\n  }\n\n  ...\n}\n')))}d.isMDXComponent=!0}}]);