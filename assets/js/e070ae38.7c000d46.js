"use strict";(self.webpackChunk_lilib_hooks=self.webpackChunk_lilib_hooks||[]).push([[4800],{61368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(87462),s=(n(67294),n(3905));const r={},o=void 0,i={unversionedId:"useTargetEffect",id:"useTargetEffect",title:"useTargetEffect",description:"This hook is similar to React.useEffect, but it has one more targets parameter as another dependency list. targets can be functions, refs, or any other type values. If targets are functions or refs, this hook will get their return values or reference values, and compare these values with the previous dependencies. It is useful when using DOM nodes as effect dependencies.",source:"@site/docs/useTargetEffect.mdx",sourceDirName:".",slug:"/useTargetEffect",permalink:"/hooks/useTargetEffect",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"useUnmount",permalink:"/hooks/useUnmount"},next:{title:"useLayoutMount",permalink:"/hooks/useLayoutMount"}},l={},u=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}],f={toc:u};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This hook is similar to React.useEffect, but it has one more ",(0,s.kt)("inlineCode",{parentName:"p"},"targets")," parameter as another dependency list. ",(0,s.kt)("inlineCode",{parentName:"p"},"targets")," can be functions, refs, or any other type values. If ",(0,s.kt)("inlineCode",{parentName:"p"},"targets")," are functions or refs, this hook will get their return values or reference values, and compare these values with the previous dependencies. It is useful when using DOM nodes as effect dependencies."),(0,s.kt)("h2",{id:"api"},"API"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"function useTargetEffect(\n  effect: React.EffectCallback,\n  deps: React.DependencyList,\n  targets: ReadonlyArray<EffectTarget<any>>\n): void;\n\ntype Nullable<T> = T | undefined | null;\ntype EffectTarget<T> =\n  | Nullable<T>\n  | (() => Nullable<T>)\n  | { current: Nullable<T> };\n")),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, { useRef } from "react";\nimport { useTargetEffect } from "@lilib/hooks";\n\nfunction Example() {\n  const domRef = useRef<HTMLDivElement>(null);\n\n  useTargetEffect(\n    () => {\n      // Do something.\n    },\n    [],\n    [domRef]\n  );\n\n  return <div ref={domRef}>...</div>;\n}\n')))}c.isMDXComponent=!0}}]);